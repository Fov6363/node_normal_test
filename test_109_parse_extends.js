/**
 * Created by yuanyuan on 17/3/19.
 */
const debug = require('debug');
const Promise = require('bluebird');

const fs = require('fs');
const CryptoJs = require('crypto-js');
const secret_key = '8d26c846ca909ce72db342a12f2c3fd5';
const crypto     = require('crypto');
let decr_key = md5(secret_key);
const doc = "U2FsdGVkX1+tsmr0y2xM0TGuqL52BCoi4LQC2q2FIkO4RzztGzRJCepIgKD8qoj7xFAVbGAYU6jO+gXk/WDsZL8GUF/KTnKfemlHfslQCJV4A1D4bnpJj2HG1J4/GOTP+s1m6Ck8I94MW1Np6jsL/0Ipe1fsWY7Yq5XfAoInRGGnu4Rvi+oeid1ZAaCX1Pfck5YyQZMZLeWPhMXeUDHCq9oFM7Z9KJG3hapfmqZ2waYT4kCKR4aeSbVeNBeN/3zestn7eVkqF/1h36K9HYosIlZY7/HMpi7OQ75MwwoqXkZJ5hIH1Jir0PYOxKvZwRkOjmGJv12JReDKJFs95IgSpZJ3X+Xr1qqqw1fg3B4DqO6zG80HszCcqoNb4E6S80wTWH/9vzhGq8QItre3liSsfvcmHkDP6DNNojgIcYZZVqfmtcWngWzqKQ0xW1xizpeuwdUQjhdkVvhYAHUBKfy3SWgwGOWcT7RGg2yjFHMJn8Twt0CCheDE/b9CgpA14hLKRnFrp9wHeH62uioShmBOZlXRMosMz6LdakazF4rz803nCE+k5KR7zdrwpWGmgkmN1kJjh0rd4BPZaAjl6pS9dYGey14CVT0kiwKludwSH0oN801UE4fPkvwvsgErYkT6Oyb36U51cexk59j3ynIf/uOJNP4BS3BZ0hbgNCTLT8sAMseNpkyfJ9iy3zeXJXTrwYbRAr3nAUl9LPakKpI8GlqhH8bA4A9E/B7Ao9kMs0yLwypCFrbJBEy6ksl1WfARjCZUfqDL9eyMwIQfw0VjvabfQ+ameRIq2uqXdcZWcUTV1lMxLJ+nCUrqnjqCBN1qLpotFS0MPGpHRROQswdv+8sqN+FGHhZrg6s7iSsjgVEw0oQ7XOOv6DMHxQ/N1Vo+HXRmR8XbV6hV/n10ROZAXgxIM1VD/T5Yy6bzPP/nMqjkPs9GB3L5fik0Zh1CbE9/hKx8xy6A1E6RUolJn1GmZmFjc59D2jlzlj2Ke3yWIXktGy8GWwm+xjHl1YQrpcCWNGk/1pgMQ6eC4R07KZ2BNbouxDZXS1aELWARlcfHv2/wz80IfrwQf7QQOPfCgLIbnlE+gTuBOjtsMELZgKlM8MjTxM5YhpT7iKbcjZKG/rDKdIsvEufr2jpUlaCbWEazBCF0EMg0MMC296QGDTsQ1aPdWB5LZogu32VQKKdBat9LZJFvThxpzbwd9Ky4580SgOW7mqn3ZdgznEp0tAzxiVz1HB98I4W7JWOfiU3FyBWNim3XC8BI2Tef+dZ5WpAoD+qLN5eU9dVL3o3J9jtHpFmo/fGvEWNxpdugYgfaykJZlKGC+Rs7i8DOwiYYmTNHJAVbPQFXQzQbJO5XeeyeXa29d2+p/eHKS0k/X1gpNXigS0P4LbspueqWhMoW1hkYCAFbyrr5M+TIWiCxa36fPCcak68zDGIgxHffDazTuaKG5hqkK+/t4Zfh280GvjqF8rT84Tlvd975yT5ysCphoh3aStK++DEJfcResPYx9QFTibVgU8y4DbNOGXeeFhxf+/6cOpX1O2w3LvH3+g/QbJk0IRMogSax8g9y0XWVXPnjt/5KPjXVWqd3OgGH1qhpqEOg7Dhc8L59oVOyypbbFzqFYaJD4UjvaMyCQyfq7X8DnYpOsbeOstB/Zw5UO6Oxg3mM5pUpeMP0LxCa0o67yHitNEaEcTT+cvH7WfYcWTK703kk6fMaufb26aRRstEj6RcFZTsNaZiR9CgIEuGVFiSRZIiIAnCwpqSmtRQTFhEMhpvRviJiXuK0DqruVSarybWHlMkVIz+WoCFvoNzK4t8HrCNu0XXvP2g5u7o4id3Q4NI/8+csvtSCnv5C9uaQB7S/Q3HyW4mXtoFysV9SXKPiK5VX9H7Kjy8sQSPwPXsbFggucv9pv8Dx2bA9moEzIvr7KHDtivIwdUc2oolNYXdnZ3ni6CaNvSXduVIRB2OjlDm9+DfZN2Tr/5vPVkX+fiKfXF/PAXGWX4SPKP6lH/sRCyECdipmeEBYOZY9x46J/Q7gIjI0o7vDccBvQ/cAXcrQE4wWGJ2AhFTNH5aia7PnDrg5ZBKomqz6R/3gFIxmlEcvc/MvzYaHxQHiL8ON8mcE1L1tkGjJQpHYnRDYP9/6NyOhcBUml08KIgj9omUJRq5tST3wc7H3B0l2iThUKaulg4ZXjqbAm1Bem6QApzzBL2kUfVQqJ8In1UyLasIq0/UngvvC01G7PUyU5hBpsOUcI4RYKAdbQMezkPAjnaaEpPAW+d3Rsxws4WB/7zsUfznxSqlnLdie+CRtyk5RjiMzq8vK6S6C4cY7lG6SITp8fzRoNEZHy3ugx2SF6LDDdmW1x+1LgFljeJdy7/Efo934k+/9I46GhdI6nRu7RfVVO9UNdJScicdKMD6chQPoGhrK4oDjT5ejGYj/pXCgNbqEyqfSSSqPca6U9weoiAFmWCbz6pJ9Oz0ibk4ydhV033MddQYZuJRzClcR+yz5HNUrAuy+Dta3f8PwHOvvkheXMHYvbpmS5l/onV77FrkvEl2gToW3OHIIVrpqPJFpWGWK15R+Zmgwj2m8hEJFfVYg1/wjsQsWuFn+QTX1HsIPEYnZX71gVo3s/gJdFwBa7iav2uUOpfk2Z1KHHvIQzgz9YDonip6WcTiQhL1Ot/bdb5SgUTNeOdgbhF3ZCQgGsU/K0crh4EIi7JKJjHel6HyZkkCaZ0+53gxaFRTZD5F4smxkiOmo409jppwTXt96pmCWP0xnXSKG2wjvaRcgj/cRXBFo0BSQa9+x8Ycp14MjJnA/kFd1bHvIdQtqXIg83JEjR/i8PqtNR/W9gC6ewj/z9eTHRUFwSrCuHbY7Zpby+HlcKyuQ0kYvS2Xo3234OO1kmefPZPOFLSwtCYc6NW7cVOiWMwXtUJvAqvtpz0CuLt/rSLTvQQIxHBtx6XMs2uXTgU1eRsU3a5EiDcWkOmhyrKtq9x4Jdw1ZL0l5TBiwl6BYhN8lJ+27FvDjTd3j5RKoo0/jjN+48jGmLwPZgW6L29/x9RTYWo0NZ1rXe6CD7EQ8z4HgCozQfNlPcr2v1hp0a7rLOXgYtZ6WNcKzLGw97YqeLU2ydeivOADQ4y45rTaJsq1DQPY4Itw2qKKcmyEC00PO2PPjnOxMH9Uac6dUxIbD+cnayPOOGMbImY8gSFPGuyoljZae89t8doXfln9QX6BtyqRbX0abC9KjSVhbcaQ6gj0WrxqlHIzgL7LaBWZfh8YhvdhWheyN0B0oj5a9RKbkHAi4zJcmgXk9s9xgZby9cExqJiHwf5MpytGZqcstqUt14VuVCORxiOa2Zfmrd8eu0HsJC2+ancfzgYYG20KKuQk/iL34OUmbnAiXaIXzRGA0lEQa3ZwDWT1mxuYS4Vm9mvB3SE0vo5tG8pfnAxOLo+XduTtZgNBSXrLQipKTfYK3v122aTfPhPJ5L5fc9Mk/bGOiI4iVxvVRCWibvxk14HuehWdefKMqz6cA0Ndbly5quR+8SSj/yrCQO1gmZ/nY4f/qzmjm+LDjgaPdlDLpQ/aNpGJ/QqeY6uZx5U0bEGG+ewTe8tZ3gzQw16grSQ6oS7C8t8y3+DyoGP4LfefsKkzNUjwah27tSEm1pmoW2BSjHYP5/thkVuZe9n0mgBuhkx4f18cmXi5GyZ+9jyNSPJNB2RNie4hl2RR8wSCM7uVkYUcHp0NtS90G3LKJ4zEfZtjy0Cu8wXZ1WIJhVRGukyS+FqAIBsk+SOpF/EFHO5gliue0NhNpCmbdwoVEz2RmYDpFRV5Anl0G7Wf6WCJB3rtrUrJThFeFTIWjPWuP7DXA1oGoVik52Y0zNKSz5pXGEIgyTZBN+xS7aOidLADfDS4WvgXlph9u4JH7Onoo9p9VDfbhR4iGrENF/0H4mBrSIryvVw3Nz/re0dm3HCn0J4UuNd0MXU64ckuASNggQn8R90cs3jIIQWDcRQEz79CctXiNcZaENvVpITCwRveOBCHSG+kes1n84O33Ee20GX80hjCwDLjMJzYHgOZGfwxOpxqldVW2KVhdH45+PwH398QBwQ1RmTcnEbOeqfm3fBFMhAdK0xnhlz9BSMSqycE83qpCJQphEtAA4k1MJ2qALteaOUWRreQi8C1a2uIQirI2Q3VIt/+V2xtWK34yCaqPJ9JZlLtzKRj2WIg1gdICc+0yUVcfLFCmLwrZX1k2KvmKOB1H3E7auIV6glrJy8/ByCuPhm7jahmADXivpYfAL3URujDX55bbW3FksrdfqcBcFz7e0WyXqu0aMxUptXphOjrhRZftSnXTocNOgpxHsSD0pB09hZ4K1wayoFs/x3g3sjYE5zfFLG4cnTIQwEGRI8BSI8pRRlBIu1Th0hgQw4g1Zs7b4Oub3vJ/8L//2c4XmoH01VtMJC+gieIApavQ2jeWi5ivdLuqgvxDTFb0wQVmbjI2MxJiU4dAF6vuGTatjC+yMlFDzYpABGAYI7F4IX9mBX7E4YpTeZ8Pg5CqajR1dCgxDIZR1xfQZxj9fRkMN8bNWphSKlkqwGBd4B1VAGD16vLGtycQSX4klyYhhi02YhCHJkQauX/N2ZK4WBckIDzAZQsMgRcODqHBs85ZAAl/8bQFjcYMPqtBSvru64T/cJvIb2ncCZo5n/Yonr+qKMIoTbFEC2QTIZeq6wBNXndsol2VGc15j/OywBE2I+DWxEZE0MFheGohWqAzKQqD3omSCROlDBDv7xAlAOk/3XzMQ4W0ZjdcR7ojvo4TLtaYajp0Uv5doUhLNmHnRNlt7+iuFxwAxQBj8cFw1jGWpfOKRYdQzfcor3qWsYvuDr3vXbICA2Pi/EKGiMKSnuKSvvkrlNh+OtpSH/Trs8dKs7xiJ+CBw0LlggwVJ4+cYt9A7sh2K6NiUTTepcVWu3F3P2rjHlfMMAkPR4KFKj6iwe71qJeP3lMaWFoSz4Y2ZTL9IOHPZINNd28Be5te8M2ie4cX3yQzZqIf3KwzFBYmvMoTKE5jL/UuNlgH4wzV3Neu2z8mYd9UFp+S7Knr7C+qgBGSIpPdfOWZJwRdVYQW81n0M2PrB0GQxBWsWNxVtPvKzOhfKpL8HHe+LV7CiE59YIK/U01VpFWOKLpWIJEmrmPOm/tbI8iR02Ah7Mwk3+qxr4MttFgAnwQmu9AY+hGOND3UQxF6h9zTBSvIGBHuU7F+J8kTqG3smRIbjs+80G0ieZyyyRaGsWZWg3qYrJJY3bJbvOEUtF4CLzGK6ZUQSHWe2rkvL4tWP4QgvMExdfpizBUFYY4LnIzMmFujYRnwqfnYaRz7qqsDUH+6qe+8K0ibC52zG4KKbUqFMIlORqo6sJMWHwb833pXa4nk8ViPCU5hZLeqn6KQ2KSiLXFA+5vfx5Qz+WdXzPFQlVjPdNsYNzdSg0z62F5Q9eSPNVRVUE73Tj/rz7G580mazpapsl6t8VNwMutvP+w7T468eXgEbGNZIRkCprNrVjl3LUrXSo69Gny/QphpLLmgN3qWYUps5pEpqQGnDHw4YqAfe5shOB0q0g/dD6ts7fQkEADtnBzWHGe/GpSlvu+/MLLepmqb+IFll0fyzKWEEB5UikyX0Uqo3LM+/1c=";
let bytes = CryptoJs.AES.decrypt(doc,decr_key);
var configValue = JSON.parse(bytes.toString(CryptoJs.enc.Utf8));

console.log(JSON.stringify(configValue));


function md5(key) {
    if(typeof key != 'string'){
        key += '';
    }

    if(key){
        key  = crypto.createHash('md5').update(key).digest("hex");
    }
    return key;
};